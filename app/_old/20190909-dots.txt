import 'intersection-observer';
import 'waypoints/lib/noframework.waypoints.min.js';

class Dots {

    //global variable declarations and function binding
    constructor(target, dataArray) {
        this.target = target;
        this.dataArray = dataArray;
        this.width = 450
        this.height = 450
        this.svg = d3.select(this.target).append("svg").attr("width", this.width).attr("height", this.height);
        this.color = d3.scaleOrdinal().domain([1, 2, 3]).range([ "#F8766D", "#00BA38", "#619CFF"]);

    }



    render() {

        var self = this;
        var dataArray = self.dataArray;

        var x = d3.scaleOrdinal()
        .domain([1, 2, 3])
        .range([200, 340, 470])

        var node = self.svg.append("g")
        .selectAll("circle")
        .data(dataArray[0])
        .enter()
        .append("circle")
          .attr("r", 2)
          .attr("cx", self.width / 2)
          .attr("cy", self.height / 2)
          .style("fill", function(d){ return self.color(d.group)})
          .style("fill-opacity", 0.8)
          // .attr("stroke", "black")
          .style("stroke-width", 1);
      
    
      var simulation = d3.forceSimulation()
          .force("x", d3.forceX().strength(0.8).x( function(d){ return x(d.group) } ))
          .force("y", d3.forceY().strength(0.8).y( self.height/2 ))
          .force("center", d3.forceCenter().x(self.width / 3).y(self.height / 3))
          .force("charge", d3.forceManyBody().strength(1))
          .force("collide", d3.forceCollide().strength(.1).radius(3).iterations(1));
    
      simulation
          .nodes(dataArray[0])
          .on("tick", function(d){
            node
                .attr("cx", function(d){ return d.x; })
                .attr("cy", function(d){ return d.y; })
          });

    
        function update(node, simulation, new_data){
    
            var t = d3.transition().duration(1200);
     
           node.data(new_data)        
           .enter()
           .append("circle")
             .attr("r", 2)
             .attr("cx", self.width / 2)
             .attr("cy", self.height / 2)
             .style("fill", function(d){ return self.color(d.group)});
     
           simulation
             .nodes(new_data)
             .force("center", d3.forceCenter().x(self.width / 3).y(self.height / 3))
             .on("tick", function(d){
               node
                   .attr("cx", function(d){ return d.x; })
                   .attr("cy", function(d){ return d.y; })
             });
         }

       //assign scrolling waypoint triggers
       var waypoint0 = new Waypoint({
        element: $('#step0')[0],
        handler: function(direction) {
         console.log(0);
        //   update(node, simulation, dataArray[0]);
        }
      });

       var waypoint1 = new Waypoint({
        element: $('#step1')[0],
        handler: function(direction) {
            console.log(1);
          update(node, simulation, dataArray[1]);
        }
      });

      var waypoint2 = new Waypoint({
        element: $('#step2')[0],
        handler: function(direction) {
            console.log(2);
          update(node, simulation, dataArray[2]);
        }
      });

      var waypoint3 = new Waypoint({
        element: $('#step3')[0],
        handler: function(direction) {
            console.log(3);
          update(node, simulation, dataArray[3]);
        }
      });

      var waypoint4 = new Waypoint({
        element: $('#step4')[0],
        handler: function(direction) {
            console.log(4);
          update(node, simulation, dataArray[4]);
        }
      });

      var waypoint5 = new Waypoint({
        element: $('#step5')[0],
        handler: function(direction) {
            console.log(5);
          update(node, simulation, dataArray[5]);
        }
      });
      
      var waypoint6 = new Waypoint({
        element: $('#step6')[0],
        handler: function(direction) {
            console.log(6);
          update(node, simulation, dataArray[6]);
        }
      });

      var waypoint7 = new Waypoint({
        element: $('#step7')[0],
        handler: function(direction) {
            console.log(7);
          update(node, simulation, dataArray[7]);
        }
      });

    }
}

export {
    Dots as
    default
}